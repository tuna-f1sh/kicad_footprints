#! /usr/bin/env python

from __future__ import print_function
import os
import sys
import codecs

# Use this as a substiution path rather than realpath
KICAD_ENV_SUBSTITUTION = os.getenv('KICAD_ENV_SUBSTITUTION', None)
# Strip module namae from the name matching this - 'kicad-official' for example
KICAD_OFFICIAL_SUBMODULE_STRIP = os.getenv('KICAD_OFFICIAL_SUBMODULE_STRIP', None)
# Add footprints supplied with KiCad distribution if supplied
KICAD_OFFICIAL_FOOTPRINT_DIR = os.getenv('KICAD_OFFICIAL_FOOTPRINT_DIR', None)
# KiCad env substitution for official footprint path
KICAD_OFFICIAL_FOOTPRINT_SUB = os.getenv('KICAD_OFFICIAL_FOOTPRINT_SUB', '${KICAD6_FOOTPRINT_DIR}')

def print_usage():
    print('USAGE: ./generate_table <fp-lib-table path>')

if len(sys.argv) < 2:
    print_usage()
    sys.exit(1)

if KICAD_OFFICIAL_SUBMODULE_STRIP is not None:
    print(f'Stipping module names starting with {KICAD_OFFICIAL_SUBMODULE_STRIP}')

if KICAD_ENV_SUBSTITUTION is not None:
    print(f'Substituting real path to KiCad env {KICAD_ENV_SUBSTITUTION}')

def walk_directory(path: str, f, substitution=None, strip=None, basename=False):
    for dirname, dirnames, filenames in os.walk(path):
        # don't go into any .git directories.
        if '.git' in dirnames:
            dirnames.remove('.git')

        for filename in filenames:
            if os.path.splitext(filename)[-1] == '.kicad_mod':
                if basename:
                    name = os.path.basename(dirname).replace('\\', '/')
                else:
                    name = os.path.relpath(dirname, os.path.curdir).replace('\\', '/')

                # use KiCad env substitution if supplied, else real path
                if substitution is not None:
                    uri = os.path.join(substitution, name)
                else:
                    uri = os.path.realpath(dirname).replace('\\', '/')

                # strip kicad-footprints from name to keep compatable with vanilla install
                if strip is not None:
                    if name.startswith(strip):
                        name = name.replace(strip, '').strip('.pretty')

                lib = '  (lib (name "{}")(type KiCad) (uri "{}") (options "") (descr ""))\n'.format(name, uri)
                f.write(lib)
                break

with codecs.open(sys.argv[1], mode='w', encoding='utf8') as f:
    f.write('(fp_lib_table')
    walk_directory(os.path.curdir, f, substitution=KICAD_ENV_SUBSTITUTION, strip=KICAD_OFFICIAL_SUBMODULE_STRIP)
    if KICAD_OFFICIAL_FOOTPRINT_DIR is not None and os.path.exists(KICAD_OFFICIAL_FOOTPRINT_DIR):
        walk_directory(KICAD_OFFICIAL_FOOTPRINT_DIR, f, substitution=KICAD_OFFICIAL_FOOTPRINT_SUB, strip='', basename=True)
    f.write(')')
