#! /usr/bin/env python

from __future__ import print_function
import os
import codecs
import argparse
import platform

def get_sys_filepath():
    if platform.system() == 'Darwin':
        return os.path.expanduser('~/Library/Preferences/kicad/8.0/fp-lib-table')
    elif platform.system() == 'Windows':
        return os.path.expanduser('~/AppData/Roaming/kicad/8.0/fp-lib-table')
    else:
        return os.path.expanduser('~/.config/kicad/8.0/fp-lib-table')

def get_official_dir():
    if platform.system() == 'Darwin':
        return os.path.expanduser('/Applications/KiCad/kicad.app/Contents/SharedSupport')
    elif platform.system() == 'Windows':
        return os.path.expanduser('C:/Program Files/KiCad/share/kicad')
    else:
        return os.path.expanduser('/usr/share/kicad')

def walk_directory_find_pretty(path: str, f, substitution=None, strip=None, basename=False):
    for dirname, dirnames, filenames in os.walk(path):
        # don't go into any .git directories.
        if '.git' in dirnames:
            dirnames.remove('.git')
        if 'Pre_v7' in dirnames:
            dirnames.remove('Pre_v7')

        for filename in filenames:
            if os.path.splitext(filename)[-1] == '.kicad_mod':
                if basename:
                    name = os.path.basename(dirname).replace('\\', '/')
                else:
                    name = os.path.relpath(dirname, os.path.curdir).replace('\\', '/')

                # use KiCad env substitution if supplied, else real path
                if substitution is not None:
                    uri = os.path.join(substitution, name)
                else:
                    uri = os.path.realpath(dirname).replace('\\', '/')

                # strip kicad-footprints from name and .pretty to keep compatable with vanilla install
                if strip is not None:
                    if name.startswith(strip):
                        name = os.path.splitext(name.replace(strip, ''))[0]

                lib = '  (lib (name "{}")(type KiCad) (uri "{}") (options "") (descr ""))\n'.format(name, uri)
                f.write(lib)
                break

def generate_fp_lib_table(args):
    with codecs.open(args.filepath, mode='w', encoding='utf8') as f:
        f.write('(fp_lib_table')
        walk_directory_find_pretty(os.path.curdir, f, substitution=args.substitution_path, strip=args.official_strip)
        if not args.no_official and args.official_dir is not None and os.path.exists(args.official_dir):
            walk_directory_find_pretty(os.path.join(args.official_dir, 'footprints'), f, substitution=args.official_sub, strip='', basename=True)
        f.write(')')

parser = argparse.ArgumentParser(
                    prog = 'generate_table',
                    formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                    description = 'Generates KiCad fp_lib_table footprint lookup')

parser.add_argument('-f', '--filepath', default=get_sys_filepath(), help='File path to write table data. Will create if missing and overwrite if existing. Default locations: Linux ~/.config/kicad/8.0/fp-lib-table; macOS ~/Library/Preferences/kicad/8.0/fp-lib-table; Windows ~/AppData/Roaming/kicad/8.0/fp-lib-table')
parser.add_argument('-s', '--substitution-path', type=str, help='Use this as a substiution path variable rather than the real path; ${USRMOD} for example')
parser.add_argument('-S', '--official-strip', type=str, help="Strip module name and .pretty from the name matching this - 'kicad-official' for example. Useful to maintain compatability with official default fp_lib_table in default lib")
parser.add_argument('-n', '--no-official', action='store_true', help="Don't include the official KiCad footprints in the table")
parser.add_argument('-d', '--official-dir', default=get_official_dir(), type=str, help="Add footprints supplied with KiCad distribution at this directory, using default naming")
parser.add_argument('-D', '--official-sub', type=str, default="${KICAD8_FOOTPRINT_DIR}", help="KiCad substitution path variable for official_dir")

args = parser.parse_args()

print(f'Generating to fp_lib_table {args.filepath}')

if args.official_strip is not None:
    print(f'Stipping module names starting with {args.strip}')

if args.substitution_path is not None:
    print(f'Substituting real path to KiCad env {args.substitution_path}')

if args.filepath is None:
    print('No file path supplied')
    exit(1)

generate_fp_lib_table(args)
